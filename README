Single bash-script solution for managing debian-style repositories.

Usage: ./repo.sh <distribution> <component> <command> [<packageFile> <packageFile> ... | <packageName>]
        Where <command> is of:
           -r: Rebuild for all packages
           -a: Add new package <packageFile>
           -l: List all info about repo. When <packageName> is supplied: 
               List only version info about <packageName>
----------------------------------------------------------------------------
Examples:

Create a new repository and add some deb-files:
The name of the distribution should be "experimental" and the
name of the comonent is "main".
First change the variables company, reporoot, arch and secretkeyringlocation.

mkdir -p experimental/main
mkdir dists
repo.sh experimental main -a joe-3.7-1.deb 

To use this repository on the client:
sources.list:
deb <url> experimental main

----------------------------------------------------------------------------

The tool remote-repo.sh is used for running repo.sh on a remote server and passing commands to it.
When adding files to the repository, the deb-files are transfered via scp.
It is sensible to use public key authentication on the remote server because of multiple ssh and scp commands in remote-repo.sh. (Else -> multiple password prompts)

./remote-repo.sh Usage: <remote-host> <repo commands> 


